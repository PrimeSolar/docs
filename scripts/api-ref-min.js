class DtActivityLogs extends HTMLElement{connectedCallback(){this.innerHTML+="\n    activity_logs <da-boolean/>\n    "}}customElements.define("dt-activity-logs",DtActivityLogs);class DdActivityLogs extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether activity logs are enabled for the user account:\n    <ul>\n      <li><code>true</code>: logs are enabled. Default.</li>\n      <li><code>false</code>: logs are disabled.</li>\n    </ul>\n    "}}customElements.define("dd-activity-logs",DdActivityLogs);class DtAmenities extends HTMLElement{connectedCallback(){this.innerHTML+="\n    amenities <da-arraystring/>\n    "}}customElements.define("dt-amenities",DtAmenities);class DdAmenities extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A list of useful facilities that are available near the <resource-name></resource-name>:\n    <ul>\n      <li><code>Bank</code>.</li>\n      <li><code>Bar</code>.</li>\n      <li><code>Beauty Salon</code>.</li>\n      <li><code>Cinema</code>.</li>\n      <li><code>Garden</code>.</li>\n      <li><code>Park</code>.</li>\n      <li><code>Post Office</code>.</li>\n      <li><code>Restaurant</code>.</li>\n      <li><code>Shop</code>.</li>\n      <li><code>Temple</code>.</li>\n    </ul>\n    <p>Example: <code>["Bank", "Bar", "Beauty Salon", "Cinema", "Garden", "Shop", "Temple"]</code>.</p>\n    '}}customElements.define("dd-amenities",DdAmenities);class DtAppCategory extends HTMLElement{connectedCallback(){this.innerHTML+="\n    app_category <da-string/>\n    "}}customElements.define("dt-app-category",DtAppCategory);class DdAppCategory extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The high-level family of the application.<br/>Example: <code>"Business"</code>.\n    '}}customElements.define("dd-app-category",DdAppCategory);class DtAssignedPrivileges extends HTMLElement{connectedCallback(){this.innerHTML+="\n    assigned_privileges <da-arraystring/>\n    "}}customElements.define("dt-assigned-privileges",DtAssignedPrivileges);class DdAssignedPrivileges extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The privileges this role includes:<ul>\n      <li><code>Login</code>: able to log into the Real&Mate and read resources.</li>\n      <li><code>CustomizeExecutive</code>: able to customize executive resources.</li>\n      <li><code>CustomizeUsers</code>: able to customize users accounts and their records.</li>\n      <li><code>CustomizeSelf</code>: able to change the password for the current user account.</li>\n      <li><code>CustomizeComponents</code>: able to customize components managed by this service.</li>\n    </ul>\n    <p>Example: <code>["Login"]</code>.</p>\n    '}}customElements.define("dd-assigned-privileges",DdAssignedPrivileges);class DtAuthToken extends HTMLElement{connectedCallback(){this.innerHTML+="\n    auth_token <da-string/>\n    "}}customElements.define("dt-auth-token",DtAuthToken);class DdAuthToken extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A token used for a user authentication.<br/>Example: <code>"73d0f8mkabpbmjp721asv7jaidwxn"</code>.\n    '}}customElements.define("dd-auth-token",DdAuthToken);class DtBoot extends HTMLElement{connectedCallback(){this.innerHTML+="\n    boot <da-object/>\n    "}}customElements.define("dt-boot",DtBoot);class DdBoot extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Parameters of the boot.\n    "}}customElements.define("dd-boot",DdBoot);class DtBootSourceOverrideEnabled extends HTMLElement{connectedCallback(){this.innerHTML+="\n    boot_source_override_enabled <da-string/>\n    "}}customElements.define("dt-boot-source-override-enabled",DtBootSourceOverrideEnabled);class DdBootSourceOverrideEnabled extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Boot source override configuration:<ul>\n      <li><code>once</code>: the option is enabled. The next download will occur from the source specified in <code>boot_source_override_target</code>. The value of <code>boot_source_override_enabled</code> is then reboot back to <code>disabled</code>.</li>\n      <li><code>disabled</code>: the option is disabled. Loading will occur according to the selected priority in main configuration.</li>\n    </ul>\n    <p>Example: <code>"disabled"</code>.</p>\n    '}}customElements.define("dd-boot-source-override-enabled",DdBootSourceOverrideEnabled);class DtBootSourceOverrideTarget extends HTMLElement{connectedCallback(){this.innerHTML+="\n    boot_source_override_target <da-string/>\n    "}}customElements.define("dt-boot-source-override-target",DtBootSourceOverrideTarget);class DdBootSourceOverrideTarget extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Boot source when the value of <code>boot_source_override_enabled</code> is <code>once</code>:<ul>\n      <li><code>pxe</code>: an environment for booting the system using a net card without using local data drives.</li>\n      <li><code>hdd</code>: hard disk drive.</li>\n      <li><code>cd</code>: compact disk.</li>\n      <li><code>bios_setup</code>: BIOS Setup program.</li>\n      <li><code>usb</code>: USB drive.</li>\n      <li><code>none</code>: boot source is not selected.</li>\n    </ul>\n    <p>Example: <code>"none"</code>.</p>\n    '}}customElements.define("dd-boot-source-override-target",DdBootSourceOverrideTarget);class capitalizedResourceName extends HTMLElement{connectedCallback(){this.innerHTML=document.getElementById("capitalizedResourceName").innerHTML}}customElements.define("capitalized-resource-name",capitalizedResourceName);class DtComments extends HTMLElement{connectedCallback(){this.innerHTML+="\n    comments <da-string/>\n    "}}customElements.define("dt-comments",DtComments);class DdComments extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Additional comments or notes.<br/>Example: <code>"This is a text comment."</code>.\n    '}}customElements.define("dd-comments",DdComments);class DtCommunicationPlan extends HTMLElement{connectedCallback(){this.innerHTML+="\n    communication_plan <da-string/>\n    "}}customElements.define("dt-communication-plan",DtCommunicationPlan);class DdCommunicationPlan extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Strategy for informing users and stakeholders about the reboot:<ul>\n      <li><code>Email</code>.</li>\n      <li><code>Website</code>.</li>\n      <li><code>Social Media</code>.</li>\n      <li><code>Documentation</code>.</li>\n      <li><code>FAQ</code>.</li>\n    </ul>\n    <p>Example: <code>"Website"</code>.</p>\n    '}}customElements.define("dd-communication-plan",DdCommunicationPlan);class DtDateAdded extends HTMLElement{connectedCallback(){this.innerHTML+="\n    date_added <da-datetime/>\n    "}}customElements.define("dt-date-added",DtDateAdded);class DdDateAdded extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The date and time the <resource-name></resource-name> was originally added.\n    "}}customElements.define("dd-date-added",DdDateAdded);class DtDateCreated extends HTMLElement{connectedCallback(){this.innerHTML+="\n    date_created <da-datetime/>\n    "}}customElements.define("dt-date-created",DtDateCreated);class DdDateCreated extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The date and time the <resource-name></resource-name> was originally created.\n    "}}customElements.define("dd-date-created",DdDateCreated);class DtDateModified extends HTMLElement{connectedCallback(){this.innerHTML+="\n    date_modified <da-date/>\n    "}}customElements.define("dt-date-modified",DtDateModified);class DdDateModified extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The date the <resource-name></resource-name> was last changed and saved.\n    "}}customElements.define("dd-date-modified",DdDateModified);class DtDescription extends HTMLElement{connectedCallback(){this.innerHTML+="\n    description <da-string/>\n    "}}customElements.define("dt-description",DtDescription);class DdDescription extends HTMLElement{connectedCallback(){this.innerHTML+='\n    An informational representation of the <resource-name></resource-name>.<br/>Example: <code>"This is an informational representation."</code>.\n    '}}customElements.define("dd-description",DdDescription);class DtDocumentationUpdates extends HTMLElement{connectedCallback(){this.innerHTML+="\n    documentation_updates <da-string/>\n    "}}customElements.define("dt-documentation-updates",DtDocumentationUpdates);class DdDocumentationUpdates extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Updating documentation to reflect changes introduced by the reboot.<br/>Example: <code>"Technical documentation can be updated promptly."</code>.\n    '}}customElements.define("dd-documentation-updates",DdDocumentationUpdates);class DtDocumentationUrl extends HTMLElement{connectedCallback(){this.innerHTML+="\n    documentation_url <da-string/>\n    "}}customElements.define("dt-documentation-url",DtDocumentationUrl);class DdDocumentationUrl extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The base URL for the <resource-name></resource-name> documentation.<br/>Example: <code>"https://primesolar.github.io/docs/"</code>.\n    '}}customElements.define("dd-documentation-url",DdDocumentationUrl);class DtEmail extends HTMLElement{connectedCallback(){this.innerHTML+="\n    email <da-string/>\n    "}}customElements.define("dt-email",DtEmail);class DdEmail extends HTMLElement{connectedCallback(){this.innerHTML+='\n    An email address.<br/>Example: <code>"johndoe@gmail.com"</code>.\n    '}}customElements.define("dd-email",DdEmail);class DtEnabled extends HTMLElement{connectedCallback(){this.innerHTML+="\n    enabled <da-boolean/>\n    "}}customElements.define("dt-enabled",DtEnabled);class DdEnabled extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether the <resource-name></resource-name> is enabled:\n    <ul>\n      <li><code>true</code>: the <resource-name></resource-name> is enabled. Default.</li>\n      <li><code>false</code>: the <resource-name></resource-name> is disabled.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-enabled",DdEnabled);class DtEndTime extends HTMLElement{connectedCallback(){this.innerHTML+="\n    end_time <da-datetime/>\n    "}}customElements.define("dt-end-time",DtEndTime);class DdEndTime extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The date and time when the process is expected to be completed.\n    "}}customElements.define("dd-end-time",DdEndTime);class DtEnvironment extends HTMLElement{connectedCallback(){this.innerHTML+="\n    environment <da-arraystring/>\n    "}}customElements.define("dt-environment",DtEnvironment);class DdEnvironment extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The environment type being rebooted:\n    <ul>\n      <li><code>Development</code>.</li>\n      <li><code>Testing</code>.</li>\n      <li><code>Production</code>.</li>\n    </ul>\n    <p>Example: <code>["Development"]</code>.</p>\n    '}}customElements.define("dd-environment",DdEnvironment);class DtFirstName extends HTMLElement{connectedCallback(){this.innerHTML+="\n    first_name <da-string/>\n    "}}customElements.define("dt-first-name",DtFirstName);class DdFirstName extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A personal name that identifies an individual, as distinct from their last name.<br/>Example: <code>"John"</code>.\n    '}}customElements.define("dd-first-name",DdFirstName);class DtId extends HTMLElement{connectedCallback(){this.innerHTML+="\n    id <da-string/>\n    "}}customElements.define("dt-id",DtId);class DdId extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The unique identifier of the <resource-name></resource-name>.<br/>Example: <code>"777"</code>.\n    '}}customElements.define("dd-id",DdId);class DtId2 extends HTMLElement{connectedCallback(){this.innerHTML+="\n    id <da-string/>\n    "}}customElements.define("dt-id-2",DtId2);class DdId2 extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The unique identifier of the <sub-resource-name></sub-resource-name>.<br/>Example: <code>"777"</code>.\n    '}}customElements.define("dd-id-2",DdId2);class DtIsPredefined extends HTMLElement{connectedCallback(){this.innerHTML+="\n    is_predefined <da-boolean/>\n    "}}customElements.define("dt-is-predefined",DtIsPredefined);class DdIsPredefined extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether the role is predefined:\n    <ul>\n      <li><code>true</code>: the role is predefined. Default.</li>\n      <li><code>false</code>: the role is custom.</li>\n    </ul>\n    <p>Example: <code>true</code>.</p>\n    "}}customElements.define("dd-is-predefined",DdIsPredefined);class DtImpactAssessment extends HTMLElement{connectedCallback(){this.innerHTML+="\n    impact_assessment <da-string/>\n    "}}customElements.define("dt-impact-assessment",DtImpactAssessment);class DdImpactAssessment extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Evaluation of the potential impact of the reboot on users.<br/>Example: <code>"Minimal"</code>.\n    '}}customElements.define("dd-impact-assessment",DdImpactAssessment);class DtIncidentResponse extends HTMLElement{connectedCallback(){this.innerHTML+="\n    incident_response <da-string/>\n    "}}customElements.define("dt-incident-response",DtIncidentResponse);class DdIncidentResponse extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Protocol for handling any incidents or issues that may arise during or after the reboot.<br/>Example: <code>"Development team is well-prepared and ready to tackle any issues swiftly and efficiently."</code>.\n    '}}customElements.define("dd-incident-response",DdIncidentResponse);class DtItems extends HTMLElement{connectedCallback(){this.innerHTML+="\n    items <da-object/>\n    "}}customElements.define("dt-items",DtItems);class DdItems extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Collection items.\n    "}}customElements.define("dd-items",DdItems);class DtItemsCount extends HTMLElement{connectedCallback(){this.innerHTML+="\n    items_count <da-number/>\n    "}}customElements.define("dt-items-count",DtItemsCount);class DdItemsCount extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The number of items in the collection.<br/>Example: <code>777</code>.\n    "}}customElements.define("dd-items-count",DdItemsCount);class DtLanguage extends HTMLElement{connectedCallback(){this.innerHTML+="\n    language <da-string/>\n    "}}customElements.define("dt-language",DtLanguage);class DdLanguage extends HTMLElement{connectedCallback(){this.innerHTML+="\n    A language used for the application. Default: <code>en-US</code>.<br/>Example: <code>fr-FR</code>, <code>es-ES</code>.\n    "}}customElements.define("dd-language",DdLanguage);class DtLanguageDefault extends HTMLElement{connectedCallback(){this.innerHTML+="\n    language_default <da-string/>\n    "}}customElements.define("dt-language-default",DtLanguageDefault);class DdLanguageDefault extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The default language to be used for the application. Default: <code>en-US</code>.<br/>Example: <code>fr-FR</code>, <code>es-ES</code>.\n    "}}customElements.define("dd-language-default",DdLanguageDefault);class DtLastName extends HTMLElement{connectedCallback(){this.innerHTML+="\n    last_name <da-string/>\n    "}}customElements.define("dt-last-name",DtLastName);class DdLastName extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A name that identifies an individual\'s family, as distinct from their first name.<br/>Example: <code>"Doe"</code>.\n    '}}customElements.define("dd-last-name",DdLastName);class DtLeaseAgreementDetails extends HTMLElement{connectedCallback(){this.innerHTML+="\n    lease_agreement_details <da-string/>\n    "}}customElements.define("dt-lease-agreement-details",DtLeaseAgreementDetails);class DdLeaseAgreementDetails extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Terms and conditions under that the property is leased.<br/>Example: <code>"The tenant is financially responsible for utilities, the owner is financially responsible for maintenance of the property."</code>.\n    '}}customElements.define("dd-lease-agreement-details",DdLeaseAgreementDetails);class DtLeaseTerm extends HTMLElement{connectedCallback(){this.innerHTML+="\n    lease_term <da-string/>\n    "}}customElements.define("dt-lease-term",DtLeaseTerm);class DdLeaseTerm extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A period of a lease.<br/>Example: <code>"17 months"</code>.\n    '}}customElements.define("dd-lease-term",DdLeaseTerm);class DtLicense extends HTMLElement{connectedCallback(){this.innerHTML+="\n    license <da-string/>\n    "}}customElements.define("dt-license",DtLicense);class DdLicense extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The permit from an authority to own or use <resource-name></resource-name>.\n    "}}customElements.define("dd-license",DdLicense);class mainResourceName extends HTMLElement{connectedCallback(){this.innerHTML=document.getElementById("mainResourceName").innerHTML}}customElements.define("main-resource-name",mainResourceName);class DtMaintenanceSchedule extends HTMLElement{connectedCallback(){this.innerHTML+="\n    maintenance_schedule <da-arraystring/>\n    "}}customElements.define("dt-maintenance-schedule",DtMaintenanceSchedule);class DdMaintenanceSchedule extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A list of all the expected maintenance plans.<br/>Example: <code>["Roof inspection", "Plumbing check", "Flower planting", "Garden watering", "Vegetable harvesting"]</code>.\n    '}}customElements.define("dd-maintenance-schedule",DdMaintenanceSchedule);class DtMaxPasswordLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n    max_password_length <da-number/>\n    "}}customElements.define("dt-max-password-length",DtMaxPasswordLength);class DdMaxPasswordLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n     Maximum length of password. Default: <code>20</code>.<br/>Example: <code>777</code>.\n    "}}customElements.define("dd-max-password-length",DdMaxPasswordLength);class DtMaxUsernameLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n    max_username_length <da-number/>\n    "}}customElements.define("dt-max-username-length",DtMaxUsernameLength);class DdMaxUsernameLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n     Maximum length of username. Default: <code>20</code>.<br/>Example: <code>777</code>.\n    "}}customElements.define("dd-max-username-length",DdMaxUsernameLength);class DtMiddleName extends HTMLElement{connectedCallback(){this.innerHTML+="\n    middle_name <da-string/>\n    "}}customElements.define("dt-middle-name",DtMiddleName);class DdMiddleName extends HTMLElement{connectedCallback(){this.innerHTML+='\n    An additional personal name that is placed between a person\'s first name and their last name.<br/>Example: <code>"Michael"</code>.\n    '}}customElements.define("dd-middle-name",DdMiddleName);class DtMinPasswordLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n    min_password_length <da-number/>\n    "}}customElements.define("dt-min-password-length",DtMinPasswordLength);class DdMinPasswordLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n     Minimum length of password. Default: <code>8</code>.<br/>Example: <code>777</code>.\n    "}}customElements.define("dd-min-password-length",DdMinPasswordLength);class DtMinUsernameLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n    min_username_length <da-number/>\n    "}}customElements.define("dt-min-username-length",DtMinUsernameLength);class DdMinUsernameLength extends HTMLElement{connectedCallback(){this.innerHTML+="\n     Minimum length of username. Default: <code>1</code>.<br/>Example: <code>1</code>.\n    "}}customElements.define("dd-min-username-length",DdMinUsernameLength);class DtMonitoring extends HTMLElement{connectedCallback(){this.innerHTML+="\n    monitoring <da-string/>\n    "}}customElements.define("dt-monitoring",DtMonitoring);class DdMonitoring extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Configuration for monitoring the reboot process in real-time.<br/>Example: <code>"Monitoring tools that can provide real-time insights."</code>.\n    '}}customElements.define("dd-monitoring",DdMonitoring);class DtName extends HTMLElement{connectedCallback(){this.innerHTML+="\n    name <da-string/>\n    "}}customElements.define("dt-name",DtName);class DdName extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A word or set of words by that the <resource-name></resource-name> is known, addressed and referred to.<br/>Example: <code>"Real Estate Object Profile Collection"</code>.\n    '}}customElements.define("dd-name",DdName);class DtName2 extends HTMLElement{connectedCallback(){this.innerHTML+="\n    name <da-string/>\n    "}}customElements.define("dt-name-2",DtName2);class DdName2 extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A name of a person.<br/>Example: <code>"John"</code>.\n    '}}customElements.define("dd-name-2",DdName2);class DtName3 extends HTMLElement{connectedCallback(){this.innerHTML+="\n    name <da-string/>\n    "}}customElements.define("dt-name-3",DtName3);class DdName3 extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A word or set of words by that a <sub-resource-name></sub-resource-name> is known, addressed and referred to.<br/>Example: <code>"agency"</code>.\n    '}}customElements.define("dd-name-3",DdName3);class DtNotifications extends HTMLElement{connectedCallback(){this.innerHTML+="\n    notifications <da-boolean/>\n    "}}customElements.define("dt-notifications",DtNotifications);class DdNotifications extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The setting for notifications in the application:<ul>\n      <li><code>true</code>: notifications are enabled. Default.</li>\n      <li><code>false</code>: notifications are disabled.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-notifications",DdNotifications);class DtNotificationsDefault extends HTMLElement{connectedCallback(){this.innerHTML+="\n    notifications_default <da-boolean/>\n    "}}customElements.define("dt-notifications-default",DtNotificationsDefault);class DdNotificationsDefault extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The default setting for notifications in the application:<ul>\n      <li><code>true</code>: notifications are enabled. Default.</li>\n      <li><code>false</code>: notifications are disabled.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-notifications-default",DdNotificationsDefault);class DtOccupancy extends HTMLElement{connectedCallback(){this.innerHTML+="\n    occupancy <da-string/>\n    "}}customElements.define("dt-occupancy",DtOccupancy);class DdOccupancy extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The fact of occupying a <resource-name></resource-name>.<br/>Example: <code>"Tenant has a lease agreement."</code>.\n    '}}customElements.define("dd-occupancy",DdOccupancy);class DtOwner extends HTMLElement{connectedCallback(){this.innerHTML+="\n    owner <da-string/>\n    "}}customElements.define("dt-owner",DtOwner);class DdOwner extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A person or company that owns the <resource-name></resource-name>.<br/>Example: <code>"Real&Mate"</code>.\n    '}}customElements.define("dd-owner",DdOwner);class DtReason extends HTMLElement{connectedCallback(){this.innerHTML+="\n    reason <da-string/>\n    "}}customElements.define("dt-reason",DtReason);class DdReason extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A brief description of why the action is considered necessary.<br/>Example: <code>"Stability and performance"</code>.\n    '}}customElements.define("dd-reason",DdReason);class DtRebootType extends HTMLElement{connectedCallback(){this.innerHTML+="\n    reboot_type <da-arraystring/>\n    "}}customElements.define("dt-reboot-type",DtRebootType);class DdRebootType extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The type of reboot being performed:\n    <ul>\n      <li><code>System Restart</code>.</li>\n      <li><code>Configuration Change</code>.</li>\n      <li><code>Software Update</code>.</li>\n    </ul>\n    <p>Example: <code>["System Restart"]</code>.</p>\n    '}}customElements.define("dd-reboot-type",DdRebootType);class DtRequireTwoFactorAuth extends HTMLElement{connectedCallback(){this.innerHTML+="\n    require_two_factor_auth <da-boolean/>\n    "}}customElements.define("dt-require-two-factor-auth",DtRequireTwoFactorAuth);class DdRequireTwoFactorAuth extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether to require two-factor authentication:\n    <ul>\n      <li><code>true</code>: two-factor authentication is required.</li>\n      <li><code>false</code>: two-factor authentication is not required. Default.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-require-two-factor-auth",DdRequireTwoFactorAuth);class resourceName extends HTMLElement{connectedCallback(){this.innerHTML=document.getElementById("resourceName").innerHTML}}customElements.define("resource-name",resourceName);class DtPassword extends HTMLElement{connectedCallback(){this.innerHTML+="\n    password <da-string/>\n    "}}customElements.define("dt-password",DtPassword);class DdPassword extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A secret character combination that must be used to gain admission to the <main-resource-name></main-resource-name>.<br/>Example: <code>"7W%9d$Ae$57$Xbd$W$8DER7"</code>.\n    '}}customElements.define("dd-password",DdPassword);class DtPasswordChangeRequired extends HTMLElement{connectedCallback(){this.innerHTML+="\n    password_change_required <da-boolean/>\n    "}}customElements.define("dt-password-change-required",DtPasswordChangeRequired);class DdPasswordChangeRequired extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether a password change is required:\n    <ul>\n      <li><code>true</code>: a password change is required.</li>\n      <li><code>false</code>: a password change is not required.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-password-change-required",DdPasswordChangeRequired);class DtPermissions extends HTMLElement{connectedCallback(){this.innerHTML+="\n    permissions <da-arraystring/>\n    "}}customElements.define("dt-permissions",DtPermissions);class DdPermissions extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A list of permissions that are available for the user account.<br/>Example: <code>["Create advertisements", "Read advertisements", "Edit advertisements", "Delete advertisements", "Manage accounts"]</code>.\n    '}}customElements.define("dd-permissions",DdPermissions);class DtPhone extends HTMLElement{connectedCallback(){this.innerHTML+="\n    phone <da-string/>\n    "}}customElements.define("dt-phone",DtPhone);class DdPhone extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A phone number.<br/>Example: <code>"7777777"</code>.\n    '}}customElements.define("dd-phone",DdPhone);class DtPlan extends HTMLElement{connectedCallback(){this.innerHTML+="\n    plan <da-object/>\n    "}}customElements.define("dt-plan",DtPlan);class DdPlan extends HTMLElement{connectedCallback(){this.innerHTML+="\n    A subscription plan.\n    "}}customElements.define("dd-plan",DdPlan);class DtPlanFeatures extends HTMLElement{connectedCallback(){this.innerHTML+="\n    plan_features <da-arraystring/>\n    "}}customElements.define("dt-plan-features",DtPlanFeatures);class DdPlanFeatures extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The list of features included in the subscription plan.<br/>Example: <code>["Unlimited Access to Properties Information", "Advertisement-Free Experience", "Offline Downloads", "Exclusive Offers", "Priority Support"]</code>.\n    '}}customElements.define("dd-plan-features",DdPlanFeatures);class DtPlanName extends HTMLElement{connectedCallback(){this.innerHTML+="\n    plan_name <da-string/>\n    "}}customElements.define("dt-plan-name",DtPlanName);class DdPlanName extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The name of the subscription plan:<ul>\n      <li><code>Starter</code>.</li>\n      <li><code>Standard</code>.</li>\n      <li><code>Premium</code>.</li>\n      <li><code>Enterprise</code>.</li>\n    </ul>\n    <p>Example: <code>"Premium"</code>.</p>\n    '}}customElements.define("dd-plan-name",DdPlanName);class DtPlanPrice extends HTMLElement{connectedCallback(){this.innerHTML+="\n    plan_price <da-number/>\n    "}}customElements.define("dt-plan-price",DtPlanPrice);class DdPlanPrice extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The price of the subscription plan.<br/>Example: <code>20</code>.\n    "}}customElements.define("dd-plan-price",DdPlanPrice);class DtPlans extends HTMLElement{connectedCallback(){this.innerHTML+="\n    plans <da-arrayobject/>\n    "}}customElements.define("dt-plans",DtPlans);class DdPlans extends HTMLElement{connectedCallback(){this.innerHTML+="\n    A list of available subscription plans.\n    "}}customElements.define("dd-plans",DdPlans);class DtPostAnalysis extends HTMLElement{connectedCallback(){this.innerHTML+="\n    post_analysis <da-string/>\n    "}}customElements.define("dt-post-analysis",DtPostAnalysis);class DdPostAnalysis extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Analysis of the process to identify areas for improvement.<br/>Example: <code>"A detailed post-analysis to celebrate our successes and identify opportunities for future improve"</code>.\n    '}}customElements.define("dd-post-analysis",DdPostAnalysis);class DtPostRebootVerification extends HTMLElement{connectedCallback(){this.innerHTML+="\n    post_reboot_verification <da-string/>\n    "}}customElements.define("dt-post-reboot-verification",DtPostRebootVerification);class DdPostRebootVerification extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Verification steps to confirm that the reboot was successful and the application is operating as expected.<br/>Example: <code>"A quick verification process to confirm that everything is running perfectly."</code>.\n    '}}customElements.define("dd-post-reboot-verification",DdPostRebootVerification);class DtPreferences extends HTMLElement{connectedCallback(){this.innerHTML+="\n    preferences <da-object/>\n    "}}customElements.define("dt-preferences",DtPreferences);class DdPreferences extends HTMLElement{connectedCallback(){this.innerHTML+="\n    A list of user preferences.\n    "}}customElements.define("dd-preferences",DdPreferences);class DtProcessingTimeout extends HTMLElement{connectedCallback(){this.innerHTML+="\n    processing_timeout <da-boolean/>\n    "}}customElements.define("dt-processing-timeout",DtProcessingTimeout);class DdProcessingTimeout extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether the processing timeout is set:\n    <ul>\n      <li><code>true</code>: the processing timeout is set.</li>\n      <li><code>false</code>: the processing timeout is not set.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    <p>Default processing timeout: 30 seconds.</p>\n    "}}customElements.define("dd-processing-timeout",DdProcessingTimeout);class DtPropertyAddress extends HTMLElement{connectedCallback(){this.innerHTML+="\n    property_address <da-string/>\n    "}}customElements.define("dt-property-address",DtPropertyAddress);class DdPropertyAddress extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The address of the real estate object.<br/>Example: <code>"723 Maple Street, Springfield, IL 62804"</code>.\n    '}}customElements.define("dd-property-address",DdPropertyAddress);class DtPropertyArea extends HTMLElement{connectedCallback(){this.innerHTML+="\n    property_area <da-string/>\n    "}}customElements.define("dt-property-area",DtPropertyArea);class DdPropertyArea extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The area of the real estate object, expressed in square meters.<br/>Example: <code>"777"</code>.\n    '}}customElements.define("dd-property-area",DdPropertyArea);class DtPropertyId extends HTMLElement{connectedCallback(){this.innerHTML+="\n    property_id <da-string/>\n    "}}customElements.define("dt-property-id",DtPropertyId);class DdPropertyId extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The unique identifier of the property.<br/>Example: <code>"777"</code>.\n    '}}customElements.define("dd-property-id",DdPropertyId);class DtPropertyType extends HTMLElement{connectedCallback(){this.innerHTML+="\n    property_type <da-string/>\n    "}}customElements.define("dt-property-type",DtPropertyType);class DdPropertyType extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The type of the real estate object:\n    <ul>\n      <li><code>"Apartment"</code>: a room or suite of rooms designed as a residence and commonly located in a building occupied by more than one household.</li>\n      <li><code>"Townhouse"</code>: a house that is one of a row of identical houses situated side by side and sharing common walls, designed as a single-family residence.</li>\n      <li><code>"Bungalow"</code>: a small house or cottage usually having a single story and sometimes an additional attic story.</li>\n      <li><code>"Ranch"</code>: an extensive farm.</li>\n      <li><code>"Houseboat"</code>: a barge designed and equipped for use as a dwelling.</li>\n      <li><code>"Single-Family House"</code>: a structure maintained and used as a single dwelling unit.</li>\n      <li><code>"Mediterranean"</code>: a house whose key features can include high ceilings, arches, bricks, wood doors and ceramic tile.</li>\n      <li><code>"Tudor"</code>: a house that can have tall, narrow doors and windows, small diamond-shaped window panes and wooden staircases.</li>\n      <li><code>"Farmhouse"</code>: a dwelling house on a farm.</li>\n      <li><code>"Mansion"</code>: a large stately dwelling house with many rooms.</li>\n    </ul>\n    <p>Example: <code>"Apartment"</code>.</p>\n    '}}customElements.define("dd-property-type",DdPropertyType);class DtRealEstateObjects extends HTMLElement{connectedCallback(){this.innerHTML+="\n    real_estate_objects <da-object/>\n    "}}customElements.define("dt-real-estate-objects",DtRealEstateObjects);class DdRealEstateObjects extends HTMLElement{connectedCallback(){this.innerHTML+="\n    A collection of references to real estate objects.\n    "}}customElements.define("dd-real-estate-objects",DdRealEstateObjects);class DtRentableArea extends HTMLElement{connectedCallback(){this.innerHTML+="\n    rentable_area <da-string/>\n    "}}customElements.define("dt-rentable-area",DtRentableArea);class DdRentableArea extends HTMLElement{connectedCallback(){this.innerHTML+='\n    The amount of area that is allocated to a tenant.<br/>It can be used to calculate a total rent owed by a tenant to a lessor.<br/>Example: <code>"777"</code>.\n    '}}customElements.define("dd-rentable-area",DdRentableArea);class DtRentalPrice extends HTMLElement{connectedCallback(){this.innerHTML+="\n    rental_price <da-string/>\n    "}}customElements.define("dt-rental-price",DtRentalPrice);class DdRentalPrice extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A rental price of the <resource-name></resource-name>.<br/>Example: <code>"2700 USD"</code>.\n    '}}customElements.define("dd-rental-price",DdRentalPrice);class DtRoleName extends HTMLElement{connectedCallback(){this.innerHTML+="\n    role_name <da-string/>\n    "}}customElements.define("dt-role-name",DtRoleName);class DdRoleName extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A name of the specific role within the Real&Mate.<br/>Example: <code>"Developer"</code>.\n    '}}customElements.define("dd-role-name",DdRoleName);class DtRoles extends HTMLElement{connectedCallback(){this.innerHTML+="\n    roles <da-object/>\n    "}}customElements.define("dt-roles",DtRoles);class DdRoles extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Roles assigned to users within the application.\n    "}}customElements.define("dd-roles",DdRoles);class DtRollbackPlan extends HTMLElement{connectedCallback(){this.innerHTML+="\n    rollback_plan <da-string/>\n    "}}customElements.define("dt-rollback-plan",DtRollbackPlan);class DdRollbackPlan extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A plan outlining steps to revert to the previous state in case of any issues during the reboot process.<br/>Example: <code>"In the unlikely event of a web application issue, revert to the previous stable version of the."</code>.\n    '}}customElements.define("dd-rollback-plan",DdRollbackPlan);class DtSecurityDeposit extends HTMLElement{connectedCallback(){this.innerHTML+="\n    security_deposit <da-string/>\n    "}}customElements.define("dt-security-deposit",DtSecurityDeposit);class DdSecurityDeposit extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A sum of money held in trust.<br/>Example: <code>"777 USD"</code>.\n    '}}customElements.define("dd-security-deposit",DdSecurityDeposit);class DtSecuritySettings extends HTMLElement{connectedCallback(){this.innerHTML+="\n    security_settings <da-object/>\n    "}}customElements.define("dt-security-settings",DtSecuritySettings);class DdSecuritySettings extends HTMLElement{connectedCallback(){this.innerHTML+="\n     Settings related to security.\n    "}}customElements.define("dd-security-settings",DdSecuritySettings);class DtServiceEnabled extends HTMLElement{connectedCallback(){this.innerHTML+="\n    service_enabled <da-boolean/>\n    "}}customElements.define("dt-service-enabled",DtServiceEnabled);class DdServiceEnabled extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether the <resource-name></resource-name> is enabled:\n    <ul>\n      <li><code>true</code>: the service is enabled.</li>\n      <li><code>false</code>: the service is disabled.</li>\n    </ul>\n    <p>Enabled means the system will run the service on the next boot. So if you enable a service, you still need to manually start it, or reboot and it will start.</p>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-service-enabled",DdServiceEnabled);class DtShowPlansModalWindow extends HTMLElement{connectedCallback(){this.innerHTML+="\n    show_plans_modal_window <da-boolean/>\n    "}}customElements.define("dt-show-plans-modal-window",DtShowPlansModalWindow);class DdShowPlansModalWindow extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether to display the modal window with subscription plans:\n    <ul>\n      <li><code>true</code>: the modal window is displayed. Default.</li>\n      <li><code>false</code>: the modal window is not displayed.</li>\n    </ul>\n    <p>Example: <code>false</code>.</p>\n    "}}customElements.define("dd-show-plans-modal-window",DdShowPlansModalWindow);class DtShowPlansModalWindowRepeatAfter extends HTMLElement{connectedCallback(){this.innerHTML+="\n    show_plans_modal_window_repeat_after <da-number/>\n    "}}customElements.define("dt-show-plans-modal-window-repeat-after",DtShowPlansModalWindowRepeatAfter);class DdShowPlansModalWindowRepeatAfter extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The number of days after that the subscription plans modal window should be displayed again. Default: <code>30</code>.<br/>Example: <code>777</code>.\n    "}}customElements.define("dd-show-plans-modal-window-repeat-after",DdShowPlansModalWindowRepeatAfter);class DtStartTime extends HTMLElement{connectedCallback(){this.innerHTML+="\n    start_time <da-datetime/>\n    "}}customElements.define("dt-start-time",DtStartTime);class DdStartTime extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The date and time when the process is scheduled to begin.\n    "}}customElements.define("dd-start-time",DdStartTime);class subResourceName extends HTMLElement{connectedCallback(){this.innerHTML+=document.getElementById("subResourceName").innerHTML}}customElements.define("sub-resource-name",subResourceName);class DtSubscriptionManagement extends HTMLElement{connectedCallback(){this.innerHTML+="\n    subscription_management <da-object/>\n    "}}customElements.define("dt-subscription-management",DtSubscriptionManagement);class DdSubscriptionManagement extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Settings related to subscription management.\n    "}}customElements.define("dd-subscription-management",DdSubscriptionManagement);class DtTags extends HTMLElement{connectedCallback(){this.innerHTML+="\n    tags <da-arraystring/>\n    "}}customElements.define("dt-tags",DtTags);class DdTags extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Labels attached to the <resource-name></resource-name> for the purpose of identification or to add an extra level of description.<br/>Example: <code>["house", "rental", "mediterranean", "garden", "flowers"]</code>.\n    '}}customElements.define("dd-tags",DdTags);class DtTenant extends HTMLElement{connectedCallback(){this.innerHTML+="\n    tenant <da-object/>\n    "}}customElements.define("dt-tenant",DtTenant);class DdTenant extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A person who rents a property from a lessor.<br/>Example: <code>"John Doe"</code>.\n    '}}customElements.define("dd-tenant",DdTenant);class DtTestingProcedures extends HTMLElement{connectedCallback(){this.innerHTML+="\n    testing_procedures <da-string/>\n    "}}customElements.define("dt-testing-procedures",DtTestingProcedures);class DdTestingProcedures extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Procedures for testing the application after the reboot to ensure proper functionality and performance.<br/>Example: <code>"Comprehensive testing procedures will guarantee that every feature is working correctly."</code>.\n    '}}customElements.define("dd-testing-procedures",DdTestingProcedures);class DtTimeZone extends HTMLElement{connectedCallback(){this.innerHTML+="\n    time_zone <da-string/>\n    "}}customElements.define("dt-time-zone",DtTimeZone);class DdTimeZone extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The time zone used for the application. Default: <code>America/New_York</code>.<br/>Example: <code>Europe/Paris</code>, <code>Asia/Tokyo</code>.\n    "}}customElements.define("dd-time-zone",DdTimeZone);class DtTimeZoneDefault extends HTMLElement{connectedCallback(){this.innerHTML+="\n    time_zone_default <da-string/>\n    "}}customElements.define("dt-time-zone-default",DtTimeZoneDefault);class DdTimeZoneDefault extends HTMLElement{connectedCallback(){this.innerHTML+="\n    The default time zone to be used for the application. Default: <code>America/New_York</code>.<br/>Example: <code>Europe/Paris</code>, <code>Asia/Tokyo</code>.\n    "}}customElements.define("dd-time-zone-default",DdTimeZoneDefault);class DtTitle extends HTMLElement{connectedCallback(){this.innerHTML+="\n    title <da-string/>\n    "}}customElements.define("dt-title",DtTitle);class DdTitle extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A brief title of the <resource-name></resource-name>.<br/>Example: <code>"Beautiful Apartment"</code>.\n    '}}customElements.define("dd-title",DdTitle);class DtTwoFactorAuth extends HTMLElement{connectedCallback(){this.innerHTML+="\n    two_factor_auth <da-boolean/>\n    "}}customElements.define("dt-two-factor-auth",DtTwoFactorAuth);class DdTwoFactorAuth extends HTMLElement{connectedCallback(){this.innerHTML+="\n    An indication of whether a two-factor authentication is required:\n    <ul>\n      <li><code>true</code>: a two-factor authentication is required.</li>\n      <li><code>false</code>: a two-factor authentication is not required. Default.</li>\n    </ul>\n    <p>Example: <code>true</code>.</p>\n    "}}customElements.define("dd-two-factor-auth",DdTwoFactorAuth);class DtUrl extends HTMLElement{connectedCallback(){this.innerHTML+="\n    url <da-string/>\n    "}}customElements.define("dt-url",DtUrl);class DdUrl extends HTMLElement{connectedCallback(){this.innerHTML+='\n    Resource URL.<br/>Example: <code>"https://example.com/realandmate/v1/RealEstateService/RealEstateObjects/777"</code>.\n    '}}customElements.define("dd-url",DdUrl);class DtUsername extends HTMLElement{connectedCallback(){this.innerHTML+="\n    username <da-string/>\n    "}}customElements.define("dt-username",DtUsername);class DdUsername extends HTMLElement{connectedCallback(){this.innerHTML+='\n    An identifier used by a person with an access to the <main-resource-name></main-resource-name>.<br/>Example: <code>"johndoe"</code>.\n    '}}customElements.define("dd-username",DdUsername);class DtUtilities extends HTMLElement{connectedCallback(){this.innerHTML+="\n    utilities <da-arraystring/>\n    "}}customElements.define("dt-utilities",DtUtilities);class DdUtilities extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A list of available utilities:\n    <ul>\n      <li><code>Electric power</code>.</li>\n      <li><code>Natural gas</code>.</li>\n      <li><code>Sewerage</code>.</li>\n      <li><code>Cold water</code>.</li>\n      <li><code>Hot water</code>.</li>\n    </ul>\n    <p>Example: <code>["Electric power", "Natural gas", "Sewerage", "Cold water", "Hot water"]</code>.</p>\n    '}}customElements.define("dd-utilities",DdUtilities);class DtVersion extends HTMLElement{connectedCallback(){this.innerHTML+="\n    version <da-string/>\n    "}}customElements.define("dt-version",DtVersion);class DdVersion extends HTMLElement{connectedCallback(){this.innerHTML+='\n    A serial number of the <resource-name></resource-name> particular form differing in certain respects from an earlier form of it.<br/>Example: <code>"777"</code>.\n    '}}customElements.define("dd-version",DdVersion);const dd=document.getElementsByTagName("dd"),dl=document.getElementsByTagName("dl");for(let e of dd)for(let n of dl)1==e.contains(n)&&(e.style.marginBottom="0");const ul=document.getElementsByTagName("ul");for(let e of dd)for(let n of ul)1==e.contains(n)&&(e.style.marginBottom="0");class THTTPCode200 extends HTMLElement{connectedCallback(){this.innerHTML+="\n    HTTP Code: 200\n    "}}customElements.define("t-http-code-200",THTTPCode200);class TRequestBody extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Request Body\n    "}}customElements.define("t-request-body",TRequestBody);class TRequestExample extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Request Example\n    "}}customElements.define("t-request-example",TRequestExample);class TRequestHeaders extends HTMLElement{connectedCallback(){this.innerHTML="\n    Request Headers\n    "}}customElements.define("t-request-headers",TRequestHeaders);class TResponseBody extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Response Body\n    "}}customElements.define("t-response-body",TResponseBody);class TResponseCodes extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Response Codes\n    "}}customElements.define("t-response-codes",TResponseCodes);class TResponseExample extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Response Example\n    "}}customElements.define("t-response-example",TResponseExample);class DtArrayBigint extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>array[bigint]</dataType>\n    "}}customElements.define("da-arraybigint",DtArrayBigint);class DtArrayDate extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>array[date]</dataType>\n    "}}customElements.define("da-arraydate",DtArrayDate);class DtArrayNumber extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>array[number]</dataType>\n    "}}customElements.define("da-arraynumber",DtArrayNumber);class DtArrayObject extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>array[object]</dataType>\n    "}}customElements.define("da-arrayobject",DtArrayObject);class DtArrayString extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>array[string]</dataType>\n    "}}customElements.define("da-arraystring",DtArrayString);class DtBigint extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>bigint</dataType>\n    "}}customElements.define("da-bigint",DtBigint);class DtBoolean extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>boolean</dataType>\n    "}}customElements.define("da-boolean",DtBoolean);class DtDate extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>date</dataType>\n    "}}customElements.define("da-date",DtDate);class DtDateTime extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>datetime</dataType>\n    "}}customElements.define("da-datetime",DtDateTime);class DtNumber extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>number</dataType>\n    "}}customElements.define("da-number",DtNumber);class DtObject extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>object</dataType>\n    "}}customElements.define("da-object",DtObject);class DtString extends HTMLElement{connectedCallback(){this.innerHTML+="\n    <dataType>string</dataType>\n    "}}customElements.define("da-string",DtString);const colgroup=document.getElementById("rc-colgroup");colgroup&&(colgroup.children[0].style.width="20%",colgroup.children[1].style.width="80%");class Sc200Dsc extends HTMLElement{connectedCallback(){this.innerHTML+='\n    <a href="https://www.rfc-editor.org/rfc/rfc2616#section-10.2.1" target="_blank">The request has succeeded.</a>\n    '}}customElements.define("sc-200-dsc",Sc200Dsc);const sc200=document.getElementById("sc-200");sc200&&(sc200.innerHTML+='\n      <td>\n        200\n      </td>\n      <td class="cell-center">\n        <sc-200-dsc></sc-200-dsc>\n      </td>\n    ');class Sc204Dsc extends HTMLElement{connectedCallback(){this.innerHTML+='\n    <a href="https://www.rfc-editor.org/rfc/rfc2616#section-10.2.5" target="_blank">The request was completed successfully,<br />there is no additional content to send.</a>\n    '}}customElements.define("sc-204-dsc",Sc204Dsc);const sc204=document.getElementById("sc-204");sc204&&(sc204.innerHTML+='\n      <td>\n        204\n      </td>\n      <td class="cell-center">\n        <sc-204-dsc></sc-204-dsc>\n      </td>\n    ');class Sc400Dsc extends HTMLElement{connectedCallback(){this.innerHTML+='\n    <a href="https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1" target="_blank">The server cannot process the request<br />\n    because a client error has been detected.</a>\n    '}}customElements.define("sc-400-dsc",Sc400Dsc);const sc400=document.getElementById("sc-400");sc400&&(sc400.innerHTML+='\n      <td>\n        400\n      </td>\n      <td class="cell-center">\n        <sc-400-dsc></sc-400-dsc>\n      </td>\n    ');class Sc403Dsc extends HTMLElement{connectedCallback(){this.innerHTML+='\n    <a href="https://www.rfc-editor.org/rfc/rfc7231#section-6.5.3" target="_blank">The server understood the request<br />\n    and does not authorize it.</a>\n    '}}customElements.define("sc-403-dsc",Sc403Dsc);const sc403=document.getElementById("sc-403");sc403&&(sc403.innerHTML+='\n      <td>\n        403\n      </td>\n      <td class="cell-center">\n        <sc-403-dsc></sc-403-dsc>\n      </td>\n    ');class Sc404Dsc extends HTMLElement{connectedCallback(){this.innerHTML+='\n    <a href="https://www.rfc-editor.org/rfc/rfc2616#section-10.4.5" target="_blank">The server cannot find the requested resource.</a>\n    '}}customElements.define("sc-404-dsc",Sc404Dsc);const sc404=document.getElementById("sc-404");sc404&&(sc404.innerHTML+='\n      <td>\n        404\n      </td>\n      <td class="cell-center">\n        <sc-404-dsc></sc-404-dsc>\n      </td>\n    ');class Sc500Dsc extends HTMLElement{connectedCallback(){this.innerHTML+='\n    <a href="https://www.rfc-editor.org/rfc/rfc2616#section-10.5.1" target="_blank">Internal server error.</a>\n    '}}customElements.define("sc-500-dsc",Sc500Dsc);const sc500=document.getElementById("sc-500");sc500&&(sc500.innerHTML+='\n      <td>\n        500\n      </td>\n      <td class="cell-center">\n        <sc-500-dsc></sc-500-dsc>\n      </td>\n    ');class ScCode extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Code\n    "}}customElements.define("sc-code",ScCode);class ScDescription extends HTMLElement{connectedCallback(){this.innerHTML+="\n    Description\n    "}}customElements.define("sc-desc",ScDescription);
